package gothon

const (
_ = iota
POP_TOP
ROT_TWO
ROT_THREE
DUP_TOP
DUP_TOP_TWO
_
_
_
NOP
UNARY_POSITIVE
UNARY_NEGATIVE
UNARY_NOT
_
_
UNARY_INVERT
_
_
_
BINARY_POWER
BINARY_MULTIPLY
_
BINARY_MODULO
BINARY_ADD
BINARY_SUBTRACT
BINARY_SUBSCR
BINARY_FLOOR_DIVIDE
BINARY_TRUE_DIVIDE
INPLACE_FLOOR_DIVIDE
INPLACE_TRUE_DIVIDE
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
STORE_MAP
INPLACE_ADD
INPLACE_SUBTRACT
INPLACE_MULTIPLY
_
INPLACE_MODULO
STORE_SUBSCR
DELETE_SUBSCR
BINARY_LSHIFT
BINARY_RSHIFT
BINARY_AND
BINARY_XOR
BINARY_OR
INPLACE_POWER
GET_ITER
STORE_LOCALS
PRINT_EXPR
LOAD_BUILD_CLASS
YIELD_FROM
_
_
INPLACE_LSHIFT
INPLACE_RSHIFT
INPLACE_AND
INPLACE_XOR
INPLACE_OR
BREAK_LOOP
WITH_CLEANUP
_
RETURN_VALUE
IMPORT_STAR
_
YIELD_VALUE
POP_BLOCK
END_FINALLY
POP_EXCEPT
STORE_NAME
DELETE_NAME
UNPACK_SEQUENCE
FOR_ITER
UNPACK_EX
STORE_ATTR
DELETE_ATTR
STORE_GLOBAL
DELETE_GLOBAL
_
LOAD_CONST
LOAD_NAME
BUILD_TUPLE
BUILD_LIST
BUILD_SET
BUILD_MAP
LOAD_ATTR
COMPARE_OP
IMPORT_NAME
IMPORT_FROM
JUMP_FORWARD
JUMP_IF_FALSE_OR_POP
JUMP_IF_TRUE_OR_POP
JUMP_ABSOLUTE
POP_JUMP_IF_FALSE
POP_JUMP_IF_TRUE
LOAD_GLOBAL
_
_
CONTINUE_LOOP
SETUP_LOOP
SETUP_EXCEPT
SETUP_FINALLY
_
LOAD_FAST
STORE_FAST
DELETE_FAST
_
_
_
RAISE_VARARGS
CALL_FUNCTION
MAKE_FUNCTION
BUILD_SLICE
MAKE_CLOSURE
LOAD_CLOSURE
LOAD_DEREF
STORE_DEREF
DELETE_DEREF
_
CALL_FUNCTION_VAR
CALL_FUNCTION_KW
CALL_FUNCTION_VAR_KW
SETUP_WITH
EXTENDED_ARG
LIST_APPEND
SET_ADD
MAP_ADD
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)

var mnemonic = []string {
"UNKNOWN_OPCODE",
"POP_TOP",
"ROT_TWO",
"ROT_THREE",
"DUP_TOP",
"DUP_TOP_TWO",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"NOP",
"UNARY_POSITIVE",
"UNARY_NEGATIVE",
"UNARY_NOT",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNARY_INVERT",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"BINARY_POWER",
"BINARY_MULTIPLY",
"UNKNOWN_OPCODE",
"BINARY_MODULO",
"BINARY_ADD",
"BINARY_SUBTRACT",
"BINARY_SUBSCR",
"BINARY_FLOOR_DIVIDE",
"BINARY_TRUE_DIVIDE",
"INPLACE_FLOOR_DIVIDE",
"INPLACE_TRUE_DIVIDE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"STORE_MAP",
"INPLACE_ADD",
"INPLACE_SUBTRACT",
"INPLACE_MULTIPLY",
"UNKNOWN_OPCODE",
"INPLACE_MODULO",
"STORE_SUBSCR",
"DELETE_SUBSCR",
"BINARY_LSHIFT",
"BINARY_RSHIFT",
"BINARY_AND",
"BINARY_XOR",
"BINARY_OR",
"INPLACE_POWER",
"GET_ITER",
"STORE_LOCALS",
"PRINT_EXPR",
"LOAD_BUILD_CLASS",
"YIELD_FROM",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"INPLACE_LSHIFT",
"INPLACE_RSHIFT",
"INPLACE_AND",
"INPLACE_XOR",
"INPLACE_OR",
"BREAK_LOOP",
"WITH_CLEANUP",
"UNKNOWN_OPCODE",
"RETURN_VALUE",
"IMPORT_STAR",
"UNKNOWN_OPCODE",
"YIELD_VALUE",
"POP_BLOCK",
"END_FINALLY",
"POP_EXCEPT",
"STORE_NAME",
"DELETE_NAME",
"UNPACK_SEQUENCE",
"FOR_ITER",
"UNPACK_EX",
"STORE_ATTR",
"DELETE_ATTR",
"STORE_GLOBAL",
"DELETE_GLOBAL",
"UNKNOWN_OPCODE",
"LOAD_CONST",
"LOAD_NAME",
"BUILD_TUPLE",
"BUILD_LIST",
"BUILD_SET",
"BUILD_MAP",
"LOAD_ATTR",
"COMPARE_OP",
"IMPORT_NAME",
"IMPORT_FROM",
"JUMP_FORWARD",
"JUMP_IF_FALSE_OR_POP",
"JUMP_IF_TRUE_OR_POP",
"JUMP_ABSOLUTE",
"POP_JUMP_IF_FALSE",
"POP_JUMP_IF_TRUE",
"LOAD_GLOBAL",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"CONTINUE_LOOP",
"SETUP_LOOP",
"SETUP_EXCEPT",
"SETUP_FINALLY",
"UNKNOWN_OPCODE",
"LOAD_FAST",
"STORE_FAST",
"DELETE_FAST",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"RAISE_VARARGS",
"CALL_FUNCTION",
"MAKE_FUNCTION",
"BUILD_SLICE",
"MAKE_CLOSURE",
"LOAD_CLOSURE",
"LOAD_DEREF",
"STORE_DEREF",
"DELETE_DEREF",
"UNKNOWN_OPCODE",
"CALL_FUNCTION_VAR",
"CALL_FUNCTION_KW",
"CALL_FUNCTION_VAR_KW",
"SETUP_WITH",
"EXTENDED_ARG",
"LIST_APPEND",
"SET_ADD",
"MAP_ADD",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
"UNKNOWN_OPCODE",
}

func GetMnemonic(opcode byte) string {
	return mnemonic[opcode]
}
